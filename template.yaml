Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.9


# Description:
#   String

Parameters:
  S3BucketName:
    Type: String

Resources:
  UploadBucket:
    Type: 'AWS::S3::Bucket'
    # DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3BucketName

  GetPresignedUrlFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambda_functions/get_presigned_url
      Handler: get_presigned_url.handler
      Environment:
        Variables:
          S3Bucket: !Ref UploadBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /get-presinged-url
            RequestParameters:
              - method.request.querystring.filename
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 's3:PutObject'
              Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'
  
  ProcessImageFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambda_functions/process_image
      Handler: process_image.handler
      Environment:
        Variables:
          DDBTable: !Ref DDBTable
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref UploadBucket
            Events: 's3:ObjectCreated:*'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 's3:GetObject'
              Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'
            - Effect: Allow
              Action: 'rekognition:RecognizeCelebrities'
              Resource: '*'
            - Effect: Allow
              Action: 'dynamodb:PutItem'
              Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTable}'

  DDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: filename
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: bucket-date-index
          KeySchema:
            - AttributeName: bucket
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      AttributeDefinitions:
        - AttributeName: filename
          AttributeType: S
        - AttributeName: date
          AttributeType: S
        - AttributeName: bucket
          AttributeType: S

    
  ListImagesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambda_functions/list_images
      Handler: list_images.handler
      Environment:
        Variables:
          DDBTable: !Ref DDBTable
          Bucket: !Ref UploadBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /images
            RequestParameters:
              - method.request.querystring.datetime
              - method.request.querystring.limit
              - method.request.querystring.token
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'dynamodb:Query'
              Resource:
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTable}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTable}/*'
  
  DescribeImageFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambda_functions/describe_image
      Handler: describe_image.handler
      Environment:
        Variables:
          DDBTable: !Ref DDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /images/{filename}
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'dynamodb:GetItem'
              Resource:
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTable}'


# Outputs:
#   set of outputs